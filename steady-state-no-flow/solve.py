'''
This file solves for the steady state of a two-dimensional fluid with no flows

This file needs the mesh files, which can be generated by `finite_elements/mesh/generate_square_mesh.py` or ``finite_elements/mesh/membrane_mesh/generate_ring_mesh.py`` with
python3 generate_square_mesh.py 0.1
python3 generate_ring_mesh.py 0.1
and which are stored into finite_elements/mesh

Run with
clear; python3 solve.py [path where to read the mesh] [path where to store the solution]
clear; clear; SOLUTION_PATH="solution"; rm -rf $SOLUTION_PATH; mkdir -p $SOLUTION_PATH/nodal_values; python3 solve.py /home/fenics/shared/steady-state-no-flow/mesh /home/fenics/shared/steady-state-no-flow/$SOLUTION_PATH
clear; clear; rm -r solution; python3 solve.py /home/fenics/shared/steady-state-no-flow/mesh /home/fenics/shared/steady-state-no-flow/solution
clear; clear; rm -r solution; mpirun -np 6 python3 solve.py /home/fenics/shared/steady-state-no-flow/mesh /home/fenics/shared/steady-state-no-flow/solution

The solution files will be stored in /home/fenics/shared/steady-state-no-flow/solution

Note that all sections of the code which need to be changed when an external parameter (e.g. the length of the Rectangle, etc...) is changed are bracketed by
#CHANGE PARAMETERS HERE
'''

import colorama as col
from fenics import *
from mshr import *
import sys

#add the path where to find the shared modules
module_path = '/home/fenics/shared/modules'
sys.path.append(module_path)

import boundary_geometry as bgeo
import function_spaces as fsp
import input_output as io
import physics as phys
import runtime_arguments as rarg

import read_mesh_square as rmsh
# import read_mesh_ring as rmsh
# import read_mesh_square_no_circle as rmsh

import variational_problem_bc_square_a as vp
# import variational_problem_bc_square_b as vp
# import variational_problem_bc_ring as vp
# import variational_problem_bc_square_no_circle_a as vp

set_log_level( 20 )
dolfin.parameters["form_compiler"]["quadrature_degree"] = 4

print("Input diredtory = ", rarg.args.input_directory )
print("Output diredtory = ", rarg.args.output_directory )
print(f"Radius of mesh cell = {col.Fore.CYAN}{rmsh.r_mesh}{col.Style.RESET_ALL}")


# solve the variational problem
J = derivative( vp.F, fsp.psi, fsp.J_psi )
problem = NonlinearVariationalProblem( vp.F, fsp.psi, vp.bcs, J )
solver = NonlinearVariationalSolver( problem )

#set the solver parameters here
params = {'nonlinear_solver': 'newton',
           'newton_solver':
            {
                'linear_solver'           : 'superlu',
                # 'linear_solver'           : 'mumps',
                # 'linear_solver':   'lu',
                'absolute_tolerance'      : 1e-6,
                'relative_tolerance'      : 1e-6,
                'maximum_iterations'      : 1000000,
                'relaxation_parameter'    : 0.95,
             }
}
solver.parameters.update(params)

#the post-processing ('pp') variational problem used to compute tau
J_pp_nu = derivative( vp.F_pp_nu, fsp.nu, fsp.J_pp_nu )
J_pp_tau = derivative( vp.F_pp_tau, fsp.tau, fsp.J_pp_tau )
problem_pp_nu = NonlinearVariationalProblem( vp.F_pp_nu, fsp.nu, [], J_pp_nu )
problem_pp_tau = NonlinearVariationalProblem( vp.F_pp_tau, fsp.tau, [], J_pp_tau )
solver_pp_nu = NonlinearVariationalSolver( problem_pp_nu )
solver_pp_tau = NonlinearVariationalSolver( problem_pp_tau )


solver.solve()
solver_pp_nu.solve()
solver_pp_tau.solve()

# Create XDMF files for visualization output
xdmffile_z = XDMFFile( (rarg.args.output_directory) + '/z.xdmf' )
xdmffile_omega = XDMFFile( (rarg.args.output_directory) + '/omega.xdmf' )
xdmffile_mu = XDMFFile( (rarg.args.output_directory) + '/mu.xdmf' )

xdmffile_nu = XDMFFile( (rarg.args.output_directory) + '/nu.xdmf' )
xdmffile_tau = XDMFFile( (rarg.args.output_directory) + '/tau.xdmf' )

xdmffile_sigma = XDMFFile( (rarg.args.output_directory) + '/sigma.xdmf' )

xdmffile_f = XDMFFile( (rarg.args.output_directory) + '/f.xdmf' )
xdmffile_f.parameters.update( {"functions_share_mesh": True, "rewrite_function_mesh": False} )

# copy the data of the  solution psi into v_output, ..., z_output, which will be allocated or re-allocated here
z_output, omega_output, mu_output = fsp.psi.split( deepcopy=True )

# print solution to file
xdmffile_z.write( z_output, 0 )
xdmffile_omega.write( omega_output, 0 )
xdmffile_mu.write( mu_output, 0 )

xdmffile_nu.write( fsp.nu, 0 )
xdmffile_tau.write( fsp.tau, 0 )

xdmffile_sigma.write( fsp.sigma, 0 )


#print to csv file
io.print_scalar_to_csvfile(z_output, (rarg.args.output_directory) + '/z.csv')
io.print_vector_to_csvfile(omega_output, (rarg.args.output_directory) + '/omega.csv')
io.print_scalar_to_csvfile(mu_output, (rarg.args.output_directory) + '/mu.csv')

io.print_vector_to_csvfile(fsp.nu, (rarg.args.output_directory) + '/nu.csv')
io.print_scalar_to_csvfile(fsp.tau, (rarg.args.output_directory) + '/tau.csv')

io.print_scalar_to_csvfile(fsp.sigma, (rarg.args.output_directory) + '/sigma.csv')


io.print_nodal_values_scalar_to_csvfile(z_output, bgeo.mesh, (rarg.args.output_directory) + '/nodal_values/z.csv')
io.print_nodal_values_vector_to_csvfile(omega_output, bgeo.mesh, (rarg.args.output_directory) + '/nodal_values/omega.csv')
io.print_nodal_values_scalar_to_csvfile(mu_output, bgeo.mesh, (rarg.args.output_directory) + '/nodal_values/mu.csv')

io.print_nodal_values_vector_to_csvfile(fsp.nu, bgeo.mesh, (rarg.args.output_directory) + '/nodal_values/nu.csv')
io.print_nodal_values_scalar_to_csvfile(fsp.tau, bgeo.mesh, (rarg.args.output_directory) + '/nodal_values/tau.csv')



# write the solutions in .h5 format so it can be read from other codes
HDF5File( MPI.comm_world, (rarg.args.output_directory) + "/h5/z.h5", "w" ).write( z_output, "/f" )
HDF5File( MPI.comm_world, (rarg.args.output_directory) + "/h5/omega.h5", "w" ).write( omega_output, "/f" )
HDF5File( MPI.comm_world, (rarg.args.output_directory) + "/h5/mu.h5", "w" ).write( mu_output, "/f" )

HDF5File( MPI.comm_world, (rarg.args.output_directory) + "/h5/nu.h5", "w" ).write( fsp.nu, "/f" )
HDF5File( MPI.comm_world, (rarg.args.output_directory) + "/h5/tau.h5", "w" ).write( fsp.tau, "/f" )

HDF5File( MPI.comm_world, (rarg.args.output_directory) + "/h5/sigma.h5", "w" ).write( fsp.sigma, "/f" )

xdmffile_f.write( project(phys.fel_n( omega_output, mu_output, fsp.tau, vp.kappa ), fsp.Q_sigma), 0 )
xdmffile_f.write( project(-phys.flaplace( fsp.sigma, omega_output), fsp.Q_sigma), 0 )

import print_out_bc_square_a
# import print_out_bc_square_b
# import print_out_bc_ring
# import print_out_bc_square_no_circle_a